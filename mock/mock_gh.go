// Code generated by MockGen. DO NOT EDIT.
// Source: gh/gh.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	target "github.com/k1LoW/ghdag/target"
)

// MockGitHubClient is a mock of GitHubClient interface.
type MockGitHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientMockRecorder
}

// MockGitHubClientMockRecorder is the mock recorder for MockGitHubClient.
type MockGitHubClientMockRecorder struct {
	mock *MockGitHubClient
}

// NewMockGitHubClient creates a new mock instance.
func NewMockGitHubClient(ctrl *gomock.Controller) *MockGitHubClient {
	mock := &MockGitHubClient{ctrl: ctrl}
	mock.recorder = &MockGitHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClient) EXPECT() *MockGitHubClientMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockGitHubClient) AddComment(ctx context.Context, n int, comment string, mentions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, n, comment, mentions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockGitHubClientMockRecorder) AddComment(ctx, n, comment, mentions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockGitHubClient)(nil).AddComment), ctx, n, comment, mentions)
}

// CloseIssue mocks base method.
func (m *MockGitHubClient) CloseIssue(ctx context.Context, n int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIssue", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIssue indicates an expected call of CloseIssue.
func (mr *MockGitHubClientMockRecorder) CloseIssue(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIssue", reflect.TypeOf((*MockGitHubClient)(nil).CloseIssue), ctx, n)
}

// FetchTarget mocks base method.
func (m *MockGitHubClient) FetchTarget(ctx context.Context, n int) (*target.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTarget", ctx, n)
	ret0, _ := ret[0].(*target.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTarget indicates an expected call of FetchTarget.
func (mr *MockGitHubClientMockRecorder) FetchTarget(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTarget", reflect.TypeOf((*MockGitHubClient)(nil).FetchTarget), ctx, n)
}

// FetchTargets mocks base method.
func (m *MockGitHubClient) FetchTargets(ctx context.Context) (target.Targets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTargets", ctx)
	ret0, _ := ret[0].(target.Targets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTargets indicates an expected call of FetchTargets.
func (mr *MockGitHubClientMockRecorder) FetchTargets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTargets", reflect.TypeOf((*MockGitHubClient)(nil).FetchTargets), ctx)
}

// MergePullRequest mocks base method.
func (m *MockGitHubClient) MergePullRequest(ctx context.Context, n int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequest", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePullRequest indicates an expected call of MergePullRequest.
func (mr *MockGitHubClientMockRecorder) MergePullRequest(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequest", reflect.TypeOf((*MockGitHubClient)(nil).MergePullRequest), ctx, n)
}

// ResolveUsers mocks base method.
func (m *MockGitHubClient) ResolveUsers(ctx context.Context, in []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUsers", ctx, in)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveUsers indicates an expected call of ResolveUsers.
func (mr *MockGitHubClientMockRecorder) ResolveUsers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUsers", reflect.TypeOf((*MockGitHubClient)(nil).ResolveUsers), ctx, in)
}

// SetAssignees mocks base method.
func (m *MockGitHubClient) SetAssignees(ctx context.Context, n int, assignees []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAssignees", ctx, n, assignees)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAssignees indicates an expected call of SetAssignees.
func (mr *MockGitHubClientMockRecorder) SetAssignees(ctx, n, assignees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAssignees", reflect.TypeOf((*MockGitHubClient)(nil).SetAssignees), ctx, n, assignees)
}

// SetLabels mocks base method.
func (m *MockGitHubClient) SetLabels(ctx context.Context, n int, labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", ctx, n, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockGitHubClientMockRecorder) SetLabels(ctx, n, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockGitHubClient)(nil).SetLabels), ctx, n, labels)
}

// SetReviewers mocks base method.
func (m *MockGitHubClient) SetReviewers(ctx context.Context, n int, reviewers []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReviewers", ctx, n, reviewers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReviewers indicates an expected call of SetReviewers.
func (mr *MockGitHubClientMockRecorder) SetReviewers(ctx, n, reviewers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReviewers", reflect.TypeOf((*MockGitHubClient)(nil).SetReviewers), ctx, n, reviewers)
}
